#+TITLE: turbo_MaCk's Evil Emacs
#+AUTHOR: Marek Fajkus
#+EMAIL: marek.faj@gmail.com

This is my Emacs configuration I'm sharing with world as a literate program containing some basics explanation
and my evaluation on experience I have white maintaining Emacs Operating System.

I'm using [[https://github.com/cask/cask][Cask]] for managing my packages. In past I was using plain ~package.el~ API in elisp
as well as [[https://github.com/jwiegley/use-package][use-package]] and custom lisp macro for dependencies management.

However from my experience neither of this scales well as your configuration grows.
To be honest while re-evaluating this I actually think that my original solution - using ~package.el~
API directly - was the best of these. Anyway I believe Cask will be rock solid solution which will
scale for years.

* Setup User Info


This is to setup user. *This is probably first think you want to change in your fork.*

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Marek Fajkus"
        user-mail-address "marek.faj@gmail.com")
#+END_SRC

* Tramp model

I'm using tramp-mode mainly to access remote machines via ssh.

#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")
#+END_SRC

* Core configuration

Setup environment and exec path. This is using ~exec-path-from-shell~ package.

#+BEGIN_SRC emacs-lisp
    (exec-path-from-shell-initialize)
#+END_SRC

These are one of the most important settings for Emacs' core and GUI.

Start Emacs server if it's not running. This allows you to use ~emacsclient [filename]~ to attach to already running Emacs.

#+BEGIN_SRC emacs-lisp
  (require 'server)
  (unless (server-running-p)
    (server-start))
#+END_SRC

Disable dummy parts of GUI like scroll-bars.

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (when (fboundp 'menu-bar-mode)
    (if (display-graphic-p)
        (if (memq window-system '(mac ns))
            (menu-bar-mode t)
            (menu-bar-mode -1))
      (menu-bar-mode -1)))
#+END_SRC

Start scratch in text mode (usefull to get a faster Emacs load time
because it avoids autoloads of elisp modes)

#+BEGIN_SRC emacs-lisp
  (setq initial-major-mode 'text-mode)
#+END_SRC

Show Line numbers in programming mode.

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'linum-mode)
#+END_SRC

Setup fringes (spaces around windows).

#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (fringe-mode 2)
    (setq-default left-fringe-width 12)
    (setq-default right-fringe-width 0))

  (setq-default truncate-lines t)
  (setq line-spacing 3)
  (set-face-attribute 'default nil :height 90)
#+END_SRC

Setup garbage collection to gain some extra performance.

#+BEGIN_SRC emacs-lisp
  (run-with-idle-timer (* 60 3) t #'garbage-collect)
#+END_SRC

Setup compilation.

#+BEGIN_SRC emacs-lisp
  (setq-default compilation-always-kill t)
  (setq compilation-ask-about-save nil)

  (add-hook 'compilation-filter-hook
	    (lambda ()
	      (when (eq major-mode 'compilation-mode)
	        (require 'ansi-color)
	        (let ((inhibit-read-only t))
		  (ansi-color-applu-on-region (point-min) (point-max))))))
#+END_SRC

Setup Directories for backups etc.

#+BEGIN_SRC emacs-lisp
  ;; Bookamrks
  (setq-default bookmark-default-file "~/.emacs.d/bookmakrs")
  (setq-default bookmark-save-flag t)

  ;; Backups
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

  ;; History
  (setq-default savehist-file "~/.emacs.d/savehist")
  (savehist-mode t)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq-default savehist-save-minibuffer-history t)
  (setq-default savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring))

  ;; Edif
  (setq-default ediff-split-window-function 'split-window-horizontally)
  (setq-default ediff-window-setup-function 'ediff-setup-windows-plain)

  ;; re-builder
  (setq-default reb-re-syntax 'string) ;; fix backslash madness
#+END_SRC

[[https://www.emacswiki.org/emacs/WinnerMode][winner mode]]

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'winner-mode)
    (winner-mode t))
#+END_SRC

Using midnight mode to clean up old buffers with periodically.

#+BEGIN_SRC emacs-lisp
  (require 'midnight)
  (midnight-delay-set 'midnight-delay 0)
#+END_SRC

Setup essential packages.

#+BEGIN_SRC emacs-lisp
  ;; saveplace
  (require 'saveplace)
  (setq-default save-place t)

  ;; smooth-scrolling
  (require 'smooth-scrolling)

  ;; recentf
  (require 'recentf)
  (recentf-mode t)
  (setq recentf-save-file "~/.emacs.d/recentf")
  (setq recentf-max-saved-items 1000)
  (setq recentf-max-menu-items 500)
  (setq recentf-auto-cleanup 300)
  (add-to-list 'recentf-exclude "COMMIT_EDITMSG\\'")
  (run-with-timer 1800 1800 'recentf-save-list)

  ;; pcomplete
  (setq-default pcomplete-ignore-case t)

  ;; imenu
  (setq-default imenu-auto-rescan t)

  ;; narrowing
  (put 'narrow-to-region 'disabled nil)

  ;; dired
  (add-hook 'dired-load-hook
            (function (lambda () (load "dired-x"))))

  ;; ibuffer
  (setq-default ibuffer-expert t)
  (setq-default ibuffer-show-empty-filter-groups nil)
  (add-hook 'ibuffer-mode-hook #'ibuffer-auto-mode)

  ;; hl line mode
  (global-hl-line-mode t)
#+END_SRC

Better scrolling

#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 9999
        scroll-preserve-screen-position t
        scroll-margin 3)
#+END_SRC

Better names for duplicated buffers

#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward
        uniquify-separator "/"
        uniquify-ignore-buffers-re "^\\*" ; leave special buffers alone
        uniquify-after-kill-buffer-p t)
#+END_SRC

Prevent killing of scratch buffer

#+BEGIN_SRC emacs-lisp
  (defun turbo_mack/do-not-kill-scratch-buffer ()
      "PREVENT KILLING SCRATCH BUFFERS!"

      (if (member (buffer-name (current-buffer))
                  '("*scratch*" "*Messages*" "*Require Times*"))
        (progn
          (bury-buffer)
          nil)
      t))

  (add-hook 'kill-buffer-query-functions 'turbo_mack/do-not-kill-scratch-buffer)
#+END_SRC

Short answers

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

UTF-8 all the things!

#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

Stay sane please

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
  (setq sentence-end-double-space nil)
  (setq delete-by-moving-to-trash t)
  (setq mark-ring-max 64)
  (setq global-mark-ring-max 128)
  (setq save-interprogram-paste-before-kill t)
  (setq create-lockfiles nil)
  (setq echo-keystrokes 0.01)
  (setq initial-major-mode 'emacs-lisp-mode)
  (setq eval-expression-print-level nil)
  (setq-default indent-tabs-mode nil)

  (setq inhibit-splash-screen t)
  (setq inhibit-startup-echo-area-message t)
  (setq inhibit-startup-message t)

  (xterm-mouse-mode t)
  (which-function-mode t)
  (blink-cursor-mode -1)
  (global-auto-revert-mode t)
  (electric-indent-mode t)
  (transient-mark-mode t)
  (delete-selection-mode t)
  (random t) ;; seed
#+END_SRC

* Color Theme

This loads my customized version of twilight theme.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
  (load-theme 'fogus t)
  (set-face-background 'hl-line "#222222")
#+END_SRC

#+RESULTS:

Making sense of love to all the sweet things on internet.

[[http://www.likecool.com/Gear/Pic/Gif%20Nyan%20Cat/Gif-Nyan-Cat.gif]]

#+BEGIN_SRC emacs-lisp
  (require 'nyan-mode)
  (defun turbo_mack/init-nyan-mode ()
    "Starts nyan mode and setup animation nad wavy trails."

    (nyan-mode t)
    (nyan-start-animation)
    (nyan-toggle-wavy-trail))

  (when (display-graphic-p)
    "Nyan mode only in gui"

    (turbo_mack/init-nyan-mode))
#+END_SRC

Theme agnostic UI settings

#+BEGIN_SRC emacs-lisp
  ;;; setup line spacing
  (setq-default line-spacing 2)
  (setq-default left-fringe-width  5)
  (setq-default right-fringe-width  2)

  (setq linum-format " %d ")
  (frame-parameter (make-frame '((border-width . 5))) 'border-width)

  (set-frame-parameter (selected-frame) 'internal-border-width 0)
#+END_SRC

* Which key

Which Key helps me with key bindings

#+BEGIN_SRC emacs-lisp :results none
(require 'which-key)
(which-key-mode t)
#+END_SRC

* Syntax improvements

#+BEGIN_SRC emacs-lisp
  (require 'smartparens)

  (require 'rainbow-delimiters)
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)

  (require 'diminish)

  (global-color-identifiers-mode)
  (diminish 'color-identifiers-mode)
#+END_SRC

* Spell Check

#+BEGIN_SRC emacs-lisp
  (setenv "DICTIONARY" "en_GB")
  (setq ispell-program-name "aspell")
#+END_SRC

* Indentation Settings

Honestly this is one of the most annoying things in Emacs.
You have no idea which packages are setting indentation rules or running
some functions when new line is created in document.
Generally Emacs tries to be smart about doing indentation which is some sense nice
but on the other hand it's definitely not the way most people organize their code
using other editors which sometimes makes it hard to satisfy style-guides in some projects.

#+BEGIN_SRC emacs-lisp
  ;; Indentation
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq indent-line-function 'insert-tab)
  (electric-pair-mode)

  ;; Remove trailing witespaces
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

This is why I tend to use editorconfig as much as I can.

#+BEGIN_SRC emacs-lisp
  (require 'editorconfig)
  (editorconfig-mode t)
#+END_SRC

Line ends sanitization.

#+BEGIN_SRC emacs-lisp
;; Line ends
(defun turbo_mack/dos-file-endings-p ()
  "Check if dos enconding is used."

  (string-match "dos" (symbol-name buffer-file-coding-system)))

(defun turbo_mack/find-file-check-line-endings ()
  "Force UNIX line endings."

  (when (turbo_mack/dos-file-endings-p)
    (set-buffer-file-coding-system 'undecided-unix)
    (set-buffer-modified-p nil)))

(add-hook 'find-file-hook 'turbo_mack/find-file-check-line-endings)
 #+END_SRC

* Languages and Platforms

This part of configuration handles settings for specific languages and major modes in general.

** Web

Web is my hate and love. Even though I'm a big critic of some technical aspect of web and standards around it
I do admire its philosophy and values.

#+BEGIN_SRC emacs-lisp
  (require 'scss-mode)
#+END_SRC

** JavaScript

Still writing a lot of JS daily for good and bad.

#+BEGIN_SRC emacs-lisp
  (require 'nvm)
  (require 'npm-mode)
  (require 'nodejs-repl)
  (require 'skewer-mode)
  (require 'ember-mode)
  (require 'handlebars-mode)

  ;; enable flycheck
  (add-hook 'js-mode-hook
          (lambda () (flycheck-mode t)))

  (defun turbo_mack/init-js-bindings ()
    "Setup key binding for JavaScript major mode."
    (interactive)
    (local-set-key (kbd "C-x C-e") 'nodejs-repl-send-last-sexp))

  (add-hook 'js-mode 'turbo_mack/init-js-bindings)
#+END_SRC

** Typescript

Typescript is far from being ideal language. Anyway I tend to use it over JS for most of the things I'll write in JS before.
Please make sure both ~typescript~ and tide ~installed~.

#+BEGIN_SRC shell :exports none :results none
npm install -g typescript
npm install -g tide
#+END_SRC

#+BEGIN_SRC emacs-lisp :results none
  (require 'typescript-mode)
  (require 'tide)

  (defun turbo_mack/init-tide-mode ()
    "Setup tide (typescript syntax checker)."

    (interactive)
    (tide-setup)
    (flycheck-mode t)
    (eldoc-mode t)
    (tide-hl-identifier-mode t)
    ;; company is an optional dependency. You have to
    ;; install it separately via package-install
    ;; `M-x package-install [ret] company`
    (company-mode t))

  (add-hook 'before-save-hook 'tide-format-before-save)
  (add-hook 'typescript-mode-hook #'turbo_mack/init-tide-mode)
  ;; format options
  (setq tide-format-options '(:insertSpaceAfterFunctionKeywordForAnonymousFunctions t :placeOpenBraceOnNewLineForFunctions nil))
#+END_SRC

#+RESULTS:
| :insertSpaceAfterFunctionKeywordForAnonymousFunctions | t | :placeOpenBraceOnNewLineForFunctions | nil |

** Elm
~elm-mode~ is great even with default settings.
Please make sure you have [[https://github.com/avh4/elm-format][elm-format]] installed.

#+BEGIN_SRC shell :exports none :resuts non
npm install -g elm
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'elm-mode)

  (add-hook 'elm-mode-hook #'elm-oracle-setup-completion)
  (add-hook 'elm-mode-hook #'auto-complete-mode)
  (add-hook 'elm-mode-hook #'elm-oracle-setup-ac)

  (defun turbo_mack/init-elm ()
    (elm-tags-on-save t)
    (elm-format-on-save t)
  )

  (add-hook 'elm-mode-hook 'turbo_mack/init-elm)
#+END_SRC

** Haskell



[[https://github.com/serras/emacs-haskell-tutorial/blob/master/tutorial.md][There]] is a great article about setting up Emacs for Haskell development by Serras.

This configuration is using several packages which requires installed binaries:

- [[https://github.com/chrisdone/hindent][hindent-mode]] takes care of formatting
- [[https://github.com/marcotmarcot/hasktags][hasktags]] is tool for creating tag files
- [[https://github.com/jaspervdj/stylish-haskell][stylish-haskell]] is another code formatting tool

#+BEGIN_SRC shell :exports none :results none
cabal install -g hindent
cabal install -g hasktags
cabal install -g stylish-haskell
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'haskell-mode)
  (require 'hindent)
  (add-hook 'haskell-mode-hook #'hindent-mode)

  (eval-after-load 'haskell-mode
    '(define-key haskell-mode-map [f8] 'haskell-navigate-imports))

  (let ((my-cabal-path (expand-file-name "~/.cabal/bin")))
    (setenv "PATH" (concat my-cabal-path path-separator (getenv "PATH")))
    (add-to-list 'exec-path my-cabal-path))

  (custom-set-variables '(haskell-tags-on-save t))

  ;; use stack instead of plain ghci
  (custom-set-variables '(haskell-process-type 'stack-ghci))

  (custom-set-variables
   '(haskell-process-suggest-remove-import-lines t)
   '(haskell-process-auto-import-loaded-modules t)
   '(haskell-process-log t))
  (eval-after-load 'haskell-mode '(progn
                                    (define-key haskell-mode-map (kbd "C-c C-l") 'haskell-process-load-or-reload)
                                    (define-key haskell-mode-map (kbd "C-c C-z") 'haskell-interactive-switch)
                                    (define-key haskell-mode-map (kbd "C-c C-n C-t") 'haskell-process-do-type)
                                    (define-key haskell-mode-map (kbd "C-c C-n C-i") 'haskell-process-do-info)
                                    (define-key haskell-mode-map (kbd "C-c C-n C-c") 'haskell-process-cabal-build)
                                    (define-key haskell-mode-map (kbd "C-c C-n c") 'haskell-process-cabal)))
  (eval-after-load 'haskell-cabal '(progn
                                     (define-key haskell-cabal-mode-map (kbd "C-c C-z") 'haskell-interactive-switch)
                                     (define-key haskell-cabal-mode-map (kbd "C-c C-k") 'haskell-interactive-mode-clear)
                                     (define-key haskell-cabal-mode-map (kbd "C-c C-c") 'haskell-process-cabal-build)
                                     (define-key haskell-cabal-mode-map (kbd "C-c c") 'haskell-process-cabal)))
#+END_SRC

#+RESULTS:
: haskell-process-cabal

*** TODO Improve performance of auto complete
    I experienced some performance issues with ~haskell-mode~. Possibly this problem with ~fly-check~.
    configuration.

*** TODO Improve indentation
    This really pisses me off. Ideally I would like same behaviour as ~elm-mode~ has (toggling indentation with ~<TAB>~).

*** TODO GHC-MOD
    GHC-Mode needs binary and some special settings. Anyway It can supports integration with company mode and other interesting features.

*** TODO Structured-Haskell mode

    [[https://github.com/chrisdone/structured-haskell-mode][structured-haskell-mode]] is super powerful mode for editing Haskell source code.

** PureScript

Another ML like language

#+BEGIN_SRC emacs-lisp
(add-hook 'purescript-mode-hook #'haskell-indentation-mode)
#+END_SRC

** Ruby

I sometimes write Ruby since it's so popular language for writing APIs and web apps.
I past I was writing a lot of Ruby myself and I keep to maintain my workflow and environment.
I prefer rbenv over RVM.

On Mac with Home Brew:

#+BEGIN_SRC shell :exports none :results none
brew install rbenv
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'rbenv)
  (rbenv-use-corresponding)

  ;; Rails
  (require 'projectile-rails)
  (add-hook 'projectile-mode-hook 'projectile-rails-on)

  (require 'yaml-mode)

  (require 'robe)
  (add-hook 'ruby-mode-hook 'robe-mode)
  (eval-after-load 'company
    '(push 'company-robe company-backends))

  (add-hook #'robe-mode-hook #'ac-robe-setup)
#+END_SRC

*** TODO Integrate REPL
    It would be nice to make repl integration working as I did for some other languages.

*** TODO Improve and map robe mode
    I haven't really test robe mode much even though it looks promising.

** Markdown
    When I can't use org I go for the markdown.

#+BEGIN_SRC emacs-lisp
  (require 'markdown-mode+)

  ;; Grammar niceness
  (add-hook 'markdown-mode
            (lambda ()
              (writegood-mode)))
#+END_SRC

*** TODO Spell checking
    Turn on spell check automatically.

** Erlang

#+BEGIN_SRC emacs-lisp
  (require 'erlang)
  (require 'erlang-start)
#+END_SRC

** Elixir
    Elixir is build on top of Erlang and OTP but has similar syntax to Ruby.
    This allows us to reuse some features from ~ruby-mode~.

#+BEGIN_SRC emacs-lisp
  (require 'elixir-mode)
  (add-to-list 'elixir-mode-hook
               (defun auto-activate-ruby-end-mode-for-elixir-mode ()
                 (set (make-variable-buffer-local 'ruby-end-expand-keywords-before-re)
                      "\\(?:^\\|\\s-+\\)\\(?:do\\)")
                 (set (make-variable-buffer-local 'ruby-end-check-statement-modifiers) nil)
                 (ruby-end-mode +1)))

  ;; setup smartprens
  (sp-with-modes '(elixir-mode)
    (sp-local-pair "fn" "end"
                   :when '(("SPC" "RET"))
                   :actions '(insert navigate))
    (sp-local-pair "do" "end"
                   :when '(("SPC" "RET"))
                   :post-handlers '(sp-ruby-def-post-handler)
                   :actions '(insert navigate)))
#+END_SRC

** Clojure
    Just basic integration which

#+BEGIN_SRC emacs-lisp
  (require 'clojure-mode)
  (require 'cider)
  (require 'flycheck-clojure)
#+END_SRC

*** TODO Improve
    Clojure has some super powerful integration. I will add them if needed.
    You can follow [[http://www.braveclojure.com/basic-emacs/][this awesome article]] (or [[http://clojure-doc.org/articles/tutorials/emacs.html][this]])for more information.

** Rust
    This is just a first spike and not well-tested integration improved integration.

#+BEGIN_SRC emacs-lisp
  (require 'rust-mode)

  (require 'cargo)
  (add-hook 'rust-mode-hook 'cargo-minor-mode)

  (require 'flycheck-rust)
  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
#+END_SRC

*** TODO Improve integration
    Especially I would like to make sure integration with fly check works as expected.

* Other Tools
  This is collection of other Emacs based tools I'm using.

** RestClient
    Rest client is better than Postman.

#+BEGIN_SRC emacs-lisp
  (require 'restclient)
#+END_SRC

* Linting
   This configuration is mostly around awesome ~fly-check-mode~.

#+BEGIN_SRC emacs-lisp
(require 'flycheck)
(global-flycheck-mode t)
#+END_SRC

* Auto complete

I have a history of using various text editor. I was actually never big fan of IDEs mostly because
my primary focus was on scripting languages. Even though I have used Netbeans and similar I never really stick to it.
However as vimmer and now Emacs user my editors configuration grows with me over time and because I'm working
on larger and larger projects all this additional stuff make something I end up with almost full IDE like environment.
Auto completion is big part of this setup which makes my life a bit easier.

I'm using auto complete mode. However I'm thinking about switching to company since it turned out that it's bit more supported.

#+BEGIN_SRC emacs-lisp
  (require 'auto-complete)
  (require 'auto-complete-config)

  (defun turbo_mack/init-auto-complete ()
    "Setup auto compltete mode."

    (setq ac-auto-show-menu t)
    (setq ac-auto-start t)

    (setq ac-quick-help-delay 0.3)
    (setq ac-quick-help-height 30)
    (setq ac-show-menu-immediately-on-auto-complete t))

  (turbo_mack/init-auto-complete)

  (defun turbo_mack/init-ac-etags ()
    "Setup auto completion for etags."
    (setq ac-etags-requires t)
    (ac-config-default)
    (ac-etags-setup))

  (turbo_mack/init-ac-etags)
#+END_SRC

* Evil

Vimmify Emacs. Sorry folks. I'm on dark side of power.

[[http://mediaserver.dwpub.com/press-release/39345/Vader_Minifig.png]]

Previously I was using evil heavily. Anyway since I've spend some time using Emacs as my default editor
I start reevaluating this. Actually relaying on evil much is not the best way to live within Emacs.
Vim is far simpler software than Emacs is and using vim way exclusively don't scale as much as Emacs do.
This is why *I've decided to exclude ~evil-leader~ while rewriting my configuration*.
It really doesn't feel like first class thing within Emacs and I try to force myself to using
Emacs way of doing things by default rather then bending every key map I can.

#+BEGIN_SRC emacs-lisp
  (defun turbo_mack/init-evil ()
    "Setup evil... Very magicaly."

    (evil-mode t)
    (setq evil-search-module 'evil-search)
    (setq evil-magic 'very-magic))
    (setq evil-want-C-u-scroll t)

  (turbo_mack/init-evil)

  (defun turbo_mack/map-basic-evil-commands ()
    "Setup W/Q commands."

    (evil-ex-define-cmd "W[rite]" 'evil-write)
    (evil-ex-define-cmd "Q[uit]" 'evil-quit)
    (evil-ex-define-cmd "wq[rite]" 'evil-write)
    (evil-ex-define-cmd "Wq[rite]" 'evil-write)
    (evil-ex-define-cmd "WQ[rite]" 'evil-write))

  (turbo_mack/map-basic-evil-commands)
#+END_SRC

I'm using evil commentary a lot. Super useful for toggling comments in code.

#+BEGIN_SRC emacs-lisp
  (require 'evil-commentary)
  (evil-commentary-mode t)
#+END_SRC

Other useful evil extensions:

#+BEGIN_SRC emacs-lisp
  (require 'evil-surround)
  (global-evil-surround-mode t)

  (require 'evil-visualstar)
  (global-evil-visualstar-mode t)
#+END_SRC

I'm using Tmux a lot in terminal. Historically my workflow was heavily based on vim running with tmux and sometimes
I tend do some operation that way even though mainly I'm tying to stay within Emacs.
Anyway smooth integration with Tmux is still important to me. ~Navigate~ package will do the trick.

#+BEGIN_SRC emacs-lisp
  ;; This package doesn't need to be init manually.
  ;;(require 'navigate)
#+END_SRC

This is to set some interface reflections of evil state.

#+BEGIN_SRC emacs-lisp
  (setq evil-emacs-state-cursor '("red" box))
  (setq evil-normal-state-cursor '("green" box))
  (setq evil-visual-state-cursor '("orange" box))
  (setq evil-insert-state-cursor '("red" bar))
  (setq evil-replace-state-cursor '("red" bar))
  (setq evil-operator-state-cursor '("red" hollow))
#+END_SRC

By default re-indenting blocks in evil is kind of nightmare. This will fix it:

#+BEGIN_SRC emacs-lisp
  (defun turbo_mack/evil-shift-left-visual ()
    "Move selected block to left."

    (interactive)
    (evil-shift-left (region-beginning) (region-end))
    (evil-normal-state)
    (evil-visual-restore))

  (defun turbo_mack/evil-shift-right-visual ()
    "Move selected block to right."

    (interactive)
    (evil-shift-right (region-beginning) (region-end))
    (evil-normal-state)
    (evil-visual-restore))

  (define-key evil-visual-state-map (kbd ">") 'turbo_mack/evil-shift-right-visual)
  (define-key evil-visual-state-map (kbd "<") 'turbo_mack/evil-shift-left-visual)
  (define-key evil-visual-state-map [tab] 'turbo_mack/evil-shift-right-visual)
  (define-key evil-visual-state-map [S-tab] 'turbo_mack/evil-shift-left-visual)
#+END_SRC

* Helm & Projectile

Helm is another important plugin I rely quite heavily on. It basically provides nice fuzzy search and auto complete
interface for various things. Projectile on the other hand setup project environment based on GIT settings in current
folder. Together Helm & Projectile are the main ways to file management and project navigation in my setup.

#+BEGIN_SRC emacs-lisp
  (require 'helm)
  (require 'helm-config)

  (defun turbo_mack/init-helm ()
    "Init helm."

    (helm-mode t)
    (helm-autoresize-mode t)
    ;; This will set header bg color to dark gray
    (set-face-attribute 'helm-source-header nil :background "#141414" :foreground "#f8f8f8"))

  (turbo_mack/init-helm)

  (require 'projectile)

  (defun turbo_mack/init-projectile ()
    "Initialize projectlile."

    (setq projectile-enable-caching -1)
    (projectile-global-mode t))

  (turbo_mack/init-projectile)

  ;; Setup Helm-Projectile integration
  (require 'helm-projectile)
  (setq helm-projectile-fuzzy-match t)

  (require 'helm-ag)
#+END_SRC

 ** Magit

Magit is my favorite GIT interface of all time. This will setup Magit itself as well as its integration to evil.

#+BEGIN_SRC emacs-lisp
  (require 'magit)
  (require 'evil-magit)
#+END_SRC

* Perspective

Perspective is package for managing workspaces within Emacs.

#+BEGIN_SRC emacs-lisp :results none
  (require 'perspective)
  (persp-mode t)
#+END_SRC

* Org Mode

Org mode is super fantastic. As I'm more fascinated with application of literate programming and reproducible research.
I really fall in love with org-mode which is my tool of choice when it comes to exploring field as well as organizing stuff.
Actually this whole configuration is one big org file.

#+BEGIN_SRC emacs-lisp
  (require 'org)
  (require 'ox)
  (require 'ob)
  (require 'flyspell)
  (require 'evil-org)

  ;; setup TODOs
  (setq org-log-done t
        org-todo-keywords '((sequence "TODO" "INPROGRESS" "DONE"))
        org-todo-keyword-faces '(("INPROGRESS" . (:foreground "blue" :weight bold))))

  ;; setup spell-checking
  (add-hook 'org-mode-hook
            (lambda ()
              (flyspell-mode)))

  ;; Grammar niceness
  (add-hook 'org-mode-hook
            (lambda ()
              (writegood-mode)))
#+END_SRC

Setup languages support for literate programming capabilities.

#+BEGIN_SRC emacs-lisp :exports none
  (require 'ob-sh)
  (require 'ob-shell)
  (require 'ob-emacs-lisp)
  (require 'ob-ruby)
  (require 'ob-js)
  (require 'ob-typescript)
  ;; ob-elm.el is part of this repository
  (require 'ob-elm)
  (require 'ob-haskell)
  (require 'ob-C)
  (require 'ob-restclient)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((sh . t)
     (shell .t)
     (emacs-lisp . t)
     (ruby . t)
     (js . t)
     (typescript . t)
     (elm . t)
     (haskell . t)
     (C . t)
     (restclient . t)))

  ;; disable confirmation of evaluation
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

** TODO Fix SH integration

* Yasnippet

Honestly I never did get used to using snippets a lot. Anyway I'm keeping this as part of my configuration because
I know it might be useful in future.

#+BEGIN_SRC emacs-lisp
  (require 'yasnippet)
#+END_SRC

* Bindings

One of the most important parts is to bind all functionality to keys and glue it together.
This is exactly what this part is about.


** Window management

#+BEGIN_SRC emacs-lisp
  (defun turbo_mack/vsplit-and-skip()
    "split verticaly and skip to new window."

    (interactive)
    (evil-window-vsplit)
    (windmove-right))

  (defun turbo_mack/split-and-skip()
    "split horizontaly and skip to new window."

    (interactive)
    (evil-window-split)
    (windmove-down))

  (defun turbo_mack/rotate-windows-helper(x d)
    (if (equal (cdr x) nil) (set-window-buffer (car x) d)
      (set-window-buffer (car x) (window-buffer (cadr x))) (turbo_mack/rotate-windows-helper (cdr x) d)))

  (defun turbo_mack/rotate-windows ()
    "Rotate Emacs windows."

    (interactive)
    (turbo_mack/rotate-windows-helper (window-list) (window-buffer (car (window-list))))
    (select-window (car (last (window-list)))))

  "Window navigation"
  (define-key evil-motion-state-map (kbd "C-h") 'windmove-left)
  (define-key evil-motion-state-map (kbd "C-j") 'windmove-down)
  (define-key evil-motion-state-map (kbd "C-k") 'windmove-up)
  (define-key evil-motion-state-map (kbd "C-l") 'windmove-right)
  (define-key evil-motion-state-map (kbd "C-w r") 'turbo_mack/rotate-windows)

  "Window spliting"
  (define-key evil-window-map (kbd "v") 'turbo_mack/vsplit-and-skip)
  (define-key evil-window-map (kbd "s") 'turbo_mack/split-and-skip)

  "Winner mode"
  (define-key evil-normal-state-map (kbd "C-c l") 'winner-redo)
  (define-key evil-normal-state-map (kbd "C-c h") 'winner-undo)
#+END_SRC

** Improve line navigation

#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)
#+END_SRC

** ESC to quit

Actually I'm thinking more and more to switching to Emacs way and rather mapping ~q~ to quit on all the places
even though I'm using ~q~ now for macro recording.

#+BEGIN_SRC emacs-lisp
  (defun turbo_mack/minibuffer-keyboard-quit ()
    "Abort recursive edit.
  In Delete Selection mode, if the mark is active, just deactivate it;
  then it takes a second \\[keyboard-quit] to abort the minibuffer."

    (interactive)
    (if (and delete-selection-mode transient-mark-mode mark-active)
        (setq deactivate-mark  t)
      (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
      (abort-recursive-edit)))

  "ESC to quit"
  (define-key evil-normal-state-map [escape] 'keyboard-quit)
  (define-key evil-visual-state-map [escape] 'keyboard-quit)
  (define-key minibuffer-local-map [escape] 'turbo_mack/minibuffer-keyboard-quit)
  (define-key minibuffer-local-ns-map [escape] 'turbo_mack/minibuffer-keyboard-quit)
  (define-key minibuffer-local-completion-map [escape] 'turbo_mack/minibuffer-keyboard-quit)
  (define-key minibuffer-local-must-match-map [escape] 'turbo_mack/minibuffer-keyboard-quit)
  (define-key minibuffer-local-isearch-map [escape] 'turbo_mack/minibuffer-keyboard-quit)
  (global-set-key [escape] 'evil-exit-emacs-state)
#+END_SRC

** jk kj to normal mode

This is nice sugar for quickly moving to normal mode.

#+BEGIN_SRC emacs-lisp
  (require 'key-chord)

  (key-chord-mode 1)
  (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
  (key-chord-define evil-insert-state-map "kj" 'evil-normal-state)
#+END_SRC

** Helm

*** make navigation vim-like

#+BEGIN_SRC emacs-lisp
  (define-key helm-map (kbd "C-j") 'helm-next-line)
  (define-key helm-map (kbd "C-k") 'helm-previous-line)
#+END_SRC


*** Force helm over default

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-x") 'helm-M-x)
  (define-key evil-motion-state-map (kbd "C-x b") 'helm-buffers-list)
  (define-key evil-motion-state-map (kbd "C-x r b") 'helm-bookmarks)
  (define-key evil-motion-state-map (kbd "C-x y") 'helm-show-kill-ring)
  (define-key evil-motion-state-map (kbd "C-x C-f") 'helm-find-files)
#+END_SRC

** Projectile & Perspective

#+BEGIN_SRC emacs-lisp
  (define-key evil-motion-state-map (kbd "C-o") 'helm-projectile-switch-project)
  (define-key evil-motion-state-map (kbd "SPC") 'persp-switch)
  (define-key evil-normal-state-map (kbd "C-p") 'helm-projectile-find-file)
#+END_SRC

** Auto Complete

#+BEGIN_SRC emacs-lisp
  (define-key ac-mode-map (kbd "C-j") 'ac-next)
  (define-key ac-mode-map (kbd "C-k") 'ac-previous)
#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "C-g") 'magit-status)
#+END_SRC

** Multiple Cursors

Nice package for Sublime Text like multiple cursor support

#+BEGIN_SRC emacs-lisp
  (require 'multiple-cursors)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC

** Terminal

My custom function to quick access to terminal. Currently its using term mode but I'm thinking about switch to eshel by default.

#+BEGIN_SRC emacs-lisp
  (defun turbo_mack/toggle-term()
    "Splits window and open terminal."

    (interactive)
    (split-window-below)
    (windmove-down)
    (term "/bin/zsh"))

  (define-key evil-normal-state-map (kbd "C-t") 'turbo_mack/toggle-term)
#+END_SRC

* OS specific configuration

All OS specific settings should go here.

** Macintosh

Clipboard mode depend on ~pbcopy~ binary.

> There is some weird race condition in ~osx-clip-board-mode~ initialization.

Attempting to enable this mode an a non-OS-X system or in a graphical Emacs will do nothing,
so it should be safe to enable it unconditionally even if you share your configuration between multiple machines.

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'osx-clip-board-mode)
            (osx-clip-board-mode t))
#+END_SRC

Command same as ctrl

#+BEGIN_SRC emacs-lisp
  (setq mac-command-modifier 'C)
#+END_SRC

** Linux

On linux magit needs to know pid of SSH agent otherwise it prompts for passphrase constantly.

#+BEGIN_SRC emacs-lisp
(when window-system
    (exec-path-from-shell-copy-env "SSH_AGENT_PID")
    (exec-path-from-shell-copy-env "SSH_AUTH_SOCK"))
#+END_SRC
