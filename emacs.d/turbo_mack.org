#+TITLE: turbo_MaCk's Evil Emacs
#+AUTHOR: Marek Fajkus
#+EMAIL: marek.faj@gmail.com

This is my Emacs configuration I'm sharing with world as a literate program containing some basics explanation
and my evaluation on experience I have white maintaining Emacs Operating System.

I'm using [[https://github.com/cask/cask][Cask]] for managing my packages. In past I was using plain ~package.el~ API in elisp
as well as [[https://github.com/jwiegley/use-package][use-package]] and custom lisp macro for dependencies management.

However from my experience neither of this scales well as your configuration grows.
To be honest while re-evaluating this I actually think that my original solution - using ~package.el~
API directly - was the best of these. Anyway I believe Cask will be rock solid solution which will
scale for years.

* Setup User Info


This is to setup user. *This is probably first think you want to change in your fork.*

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Marek Fajkus"
        user-mail-address "marek.faj@gmail.com")
#+END_SRC

* Tramp model

I'm using tramp-mode mainly to access remote machines via ssh.

#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")
#+END_SRC

* Core configuration

Setup environment and exec path. This is using ~exec-path-from-shell~ package.

#+BEGIN_SRC emacs-lisp
    (exec-path-from-shell-initialize)
#+END_SRC

These are one of the most important settings for Emacs' core and GUI.

Start Emacs server if it's not running. This allows you to use ~emacsclient [filename]~ to attach to already running Emacs.

#+BEGIN_SRC emacs-lisp
  (require 'server)
  (unless (server-running-p)
    (server-start))
#+END_SRC

Disable dummy parts of GUI like scroll-bars.

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (when (fboundp 'menu-bar-mode)
    (if (display-graphic-p)
        (if (memq window-system '(mac ns))
            (menu-bar-mode t)
            (menu-bar-mode -1))
      (menu-bar-mode -1)))
#+END_SRC

Start scratch in text mode (usefull to get a faster Emacs load time
because it avoids autoloads of elisp modes)

#+BEGIN_SRC emacs-lisp
  (setq initial-major-mode 'text-mode)
#+END_SRC

Show Line numbers in programming mode.

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'linum-mode)
#+END_SRC

Setup fringes (spaces around windows).

#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (fringe-mode 2)
    (setq-default left-fringe-width 12)
    (setq-default right-fringe-width 0))

  (setq-default truncate-lines t)
  (setq line-spacing 3)
  (set-face-attribute 'default nil :height 120)
#+END_SRC

Setup garbage collection to gain some extra performance.

#+BEGIN_SRC emacs-lisp
  (run-with-idle-timer (* 60 3) t #'garbage-collect)
#+END_SRC

Setup compilation.

#+BEGIN_SRC emacs-lisp
  (setq-default compilation-always-kill t)
  (setq compilation-ask-about-save nil)

  (add-hook 'compilation-filter-hook
	    (lambda ()
	      (when (eq major-mode 'compilation-mode)
	        (require 'ansi-color)
	        (let ((inhibit-read-only t))
		  (ansi-color-applu-on-region (point-min) (point-max))))))
#+END_SRC

Setup Directories for backups etc.

#+BEGIN_SRC emacs-lisp
  ;; Bookamrks
  (setq-default bookmark-default-file "~/.emacs.d/bookmakrs")
  (setq-default bookmark-save-flag t)

  ;; Backups
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

  ;; History
  (setq-default savehist-file "~/.emacs.d/savehist")
  (savehist-mode t)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq-default savehist-save-minibuffer-history t)
  (setq-default savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring))

  ;; Edif
  (setq-default ediff-split-window-function 'split-window-horizontally)
  (setq-default ediff-window-setup-function 'ediff-setup-windows-plain)

  ;; re-builder
  (setq-default reb-re-syntax 'string) ;; fix backslash madness
#+END_SRC

[[https://www.emacswiki.org/emacs/WinnerMode][winner mode]]

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'winner-mode)
    (winner-mode t))
#+END_SRC

Using midnight mode to clean up old buffers with periodically.

#+BEGIN_SRC emacs-lisp
  (require 'midnight)
  (midnight-delay-set 'midnight-delay 0)
#+END_SRC

Setup essential packages.

#+BEGIN_SRC emacs-lisp
  ;; saveplace
  (require 'saveplace)
  (setq-default save-place t)

  ;; smooth-scrolling
  (require 'smooth-scrolling)

  ;; recentf
  (require 'recentf)
  (recentf-mode t)
  (setq recentf-save-file "~/.emacs.d/recentf")
  (setq recentf-max-saved-items 1000)
  (setq recentf-max-menu-items 500)
  (setq recentf-auto-cleanup 300)
  (add-to-list 'recentf-exclude "COMMIT_EDITMSG\\'")
  (run-with-timer 1800 1800 'recentf-save-list)

  ;; pcomplete
  (setq-default pcomplete-ignore-case t)

  ;; imenu
  (setq-default imenu-auto-rescan t)

  ;; narrowing
  (put 'narrow-to-region 'disabled nil)

  ;; dired
  (add-hook 'dired-load-hook
            (function (lambda () (load "dired-x"))))

  ;; ibuffer
  (setq-default ibuffer-expert t)
  (setq-default ibuffer-show-empty-filter-groups nil)
  (add-hook 'ibuffer-mode-hook #'ibuffer-auto-mode)

  ;; hl line mode
  (global-hl-line-mode t)
#+END_SRC

Better scrolling

#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 9999
        scroll-preserve-screen-position t
        scroll-margin 3)
#+END_SRC

Better names for duplicated buffers

#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward
        uniquify-separator "/"
        uniquify-ignore-buffers-re "^\\*" ; leave special buffers alone
        uniquify-after-kill-buffer-p t)
#+END_SRC

Prevent killing of scratch buffer

#+BEGIN_SRC emacs-lisp
  (defun turbo_mack/do-not-kill-scratch-buffer ()
      "PREVENT KILLING SCRATCH BUFFERS!"

      (if (member (buffer-name (current-buffer))
                  '("*scratch*" "*Messages*" "*Require Times*"))
        (progn
          (bury-buffer)
          nil)
      t))

  (add-hook 'kill-buffer-query-functions 'turbo_mack/do-not-kill-scratch-buffer)
#+END_SRC

Short answers

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

UTF-8 all the things!

#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

Stay sane please

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
  (setq sentence-end-double-space nil)
  (setq delete-by-moving-to-trash t)
  (setq mark-ring-max 64)
  (setq global-mark-ring-max 128)
  (setq save-interprogram-paste-before-kill t)
  (setq create-lockfiles nil)
  (setq echo-keystrokes 0.01)
  (setq initial-major-mode 'emacs-lisp-mode)
  (setq eval-expression-print-level nil)
  (setq-default indent-tabs-mode nil)

  (setq inhibit-splash-screen t)
  (setq inhibit-startup-echo-area-message t)
  (setq inhibit-startup-message t)

  (xterm-mouse-mode t)
  (which-function-mode t)
  (blink-cursor-mode -1)
  (global-auto-revert-mode t)
  (electric-indent-mode t)
  (transient-mark-mode t)
  (delete-selection-mode t)
  (random t) ;; seed
#+END_SRC

* Color Theme

This loads my customized version of twilight theme.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
  (load-theme 'fogus t)
  (set-face-background 'hl-line "#000000")
#+END_SRC

Making sense of love to all the sweet things on internet.

[[http://www.likecool.com/Gear/Pic/Gif%20Nyan%20Cat/Gif-Nyan-Cat.gif]]

#+BEGIN_SRC emacs-lisp
  (require 'nyan-mode)
  (defun turbo_mack/init-nyan-mode ()
    "Starts nyan mode and setup animation nad wavy trails."

    (nyan-mode t)
    (nyan-start-animation)
    (nyan-toggle-wavy-trail))

  (when (display-graphic-p)
    "Nyan mode only in gui"

    (turbo_mack/init-nyan-mode))
#+END_SRC

Theme agnostic UI settings

#+BEGIN_SRC emacs-lisp
  ;;; setup line spacing
  (setq-default line-spacing 2)
  (setq-default left-fringe-width  5)
  (setq-default right-fringe-width  2)

  (setq linum-format " %d ")
  (frame-parameter (make-frame '((border-width . 5))) 'border-width)

  (set-frame-parameter (selected-frame) 'internal-border-width 0)
#+END_SRC

Make window transparent (requires compositor):

#+BEGIN_SRC emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(95 80))
  (add-to-list 'default-frame-alist '(alpha 95 80))
#+END_SRC

#+RESULTS:
: ((alpha 95 70) (alpha 85 50) (vertical-scroll-bars) (left-fringe . 2) (right-fringe . 2))

* Which key

Which Key helps me with key bindings

#+BEGIN_SRC emacs-lisp :results none
(require 'which-key)
(which-key-mode t)
#+END_SRC

* Syntax improvements

#+BEGIN_SRC emacs-lisp
  (require 'smartparens)

  (require 'rainbow-delimiters)
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)

  (require 'diminish)

  (global-color-identifiers-mode)
  (diminish 'color-identifiers-mode)

  ;; autocomplete
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

* Spell Check

#+BEGIN_SRC emacs-lisp
  (setenv "DICTIONARY" "en_GB")
  (setq ispell-program-name "aspell")
#+END_SRC

* Indentation Settings

Honestly this is one of the most annoying things in Emacs.
You have no idea which packages are setting indentation rules or running
some functions when new line is created in document.
Generally Emacs tries to be smart about doing indentation which is some sense nice
but on the other hand it's definitely not the way most people organize their code
using other editors which sometimes makes it hard to satisfy style-guides in some projects.

#+BEGIN_SRC emacs-lisp
  ;; Indentation
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq indent-line-function 'insert-tab)
  (electric-pair-mode)

  ;; Remove trailing witespaces
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

This is why I tend to use editorconfig as much as I can.

#+BEGIN_SRC emacs-lisp
  (require 'editorconfig)
  (editorconfig-mode t)
#+END_SRC

Line ends sanitization.

#+BEGIN_SRC emacs-lisp
;; Line ends
(defun turbo_mack/dos-file-endings-p ()
  "Check if dos enconding is used."

  (string-match "dos" (symbol-name buffer-file-coding-system)))

(defun turbo_mack/find-file-check-line-endings ()
  "Force UNIX line endings."

  (when (turbo_mack/dos-file-endings-p)
    (set-buffer-file-coding-system 'undecided-unix)
    (set-buffer-modified-p nil)))

(add-hook 'find-file-hook 'turbo_mack/find-file-check-line-endings)
